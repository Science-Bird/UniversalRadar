using System.Collections.Generic;
using System.IO;
using System.Reflection;
using BepInEx;
using BepInEx.Bootstrap;
using BepInEx.Configuration;
using BepInEx.Logging;
using HarmonyLib;
using UnityEngine;

namespace UniversalRadar
{
    [BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)]// ScienceBird.UniversalRadar, UniversalRadar
    [BepInDependency("voxx.TerraMesh", BepInDependency.DependencyFlags.HardDependency)]
    [BepInDependency("imabatby.lethallevelloader", BepInDependency.DependencyFlags.SoftDependency)]
    public class UniversalRadar : BaseUnityPlugin
    {
        public static UniversalRadar Instance { get; private set; } = null!;
        internal new static ManualLogSource Logger { get; private set; } = null!;
        internal static Harmony? Harmony { get; set; }

        public static AssetBundle URAssets;

        public static ConfigEntry<float> AutoLineWidth, AutoSpacing, AutoOpacity;
        public static ConfigEntry<float> CameraClipExtension;

        public static Dictionary<string, GameObject> radarSpritePrefabs = new Dictionary<string, GameObject>();

        public static bool batbyPresent = false;

        private void Awake()
        {
            Logger = base.Logger;
            Instance = this;

            AutoSpacing = base.Config.Bind("Automatic Settings", "Line Spacing", 2.5f, new ConfigDescription("Spacing between lines in automatically generated contour maps.", new AcceptableValueRange<float>(0.5f, 6f)));
            AutoLineWidth = base.Config.Bind("Automatic Settings", "Line Thickness", 3.5f, new ConfigDescription("Thickness of lines in automatically generated contour maps.", new AcceptableValueRange<float>(0.5f, 8f)));
            AutoOpacity = base.Config.Bind("Automatic Settings", "Maximum Opacity", 1f, new ConfigDescription("Maximum opacity of the shading on automatically generated contour maps (how light the tallest parts of the contour map will be).", new AcceptableValueRange<float>(0.1f, 1f)));

            CameraClipExtension = base.Config.Bind("Camera", "Increased Render Distance", 20f, new ConfigDescription("For the 3D contours generated by this mod to be captured, the region of space captured by the camera needs to be extended as well. Increasing this means more objects/scenery above and below a player will be picked up on the radar screen (set this to 0 for vanilla clipping distance).", new AcceptableValueRange<float>(0f, 30f)));

            batbyPresent = Chainloader.PluginInfos.ContainsKey("imabatby.lethallevelloader");

            string sAssemblyLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            URAssets = AssetBundle.LoadFromFile(Path.Combine(sAssemblyLocation, "sburassets"));

            //radarSpritePrefabs.Add("Level1Experimentation", (GameObject)URAssets.LoadAsset("ExperimentationRadarSprites"));
            //radarSpritePrefabs.Add("Level2Assurance", (GameObject)URAssets.LoadAsset("AssuranceRadarSprites"));
            radarSpritePrefabs.Add("Level3Vow", (GameObject)URAssets.LoadAsset("VowRadarSprites"));
            //radarSpritePrefabs.Add("Level4March", (GameObject)URAssets.LoadAsset("MarchRadarSprites"));
            //radarSpritePrefabs.Add("Level5Rend", (GameObject)URAssets.LoadAsset("RendRadarSprites"));
            //radarSpritePrefabs.Add("Level6Dine", (GameObject)URAssets.LoadAsset("DineRadarSprites"));
            radarSpritePrefabs.Add("Level7Offense", (GameObject)URAssets.LoadAsset("OffenseRadarSprites"));
            //radarSpritePrefabs.Add("Level8Titan", (GameObject)URAssets.LoadAsset("TitanRadarSprites"));
            //radarSpritePrefabs.Add("Level9Artifice", (GameObject)URAssets.LoadAsset("ArtificeRadarSprites"));
            //radarSpritePrefabs.Add("Level10Adamance", (GameObject)URAssets.LoadAsset("AdamanceRadarSprites"));
            //radarSpritePrefabs.Add("Level11Embrion", (GameObject)URAssets.LoadAsset("EmbrionRadarSprites"));

            Patch();

            Logger.LogInfo($"{MyPluginInfo.PLUGIN_GUID} v{MyPluginInfo.PLUGIN_VERSION} has loaded!");
        }

        internal static void Patch()
        {
            Harmony ??= new Harmony(MyPluginInfo.PLUGIN_GUID);

            Logger.LogDebug("Patching...");

            Harmony.PatchAll();

            Logger.LogDebug("Finished patching!");
        }

        internal static void Unpatch()
        {
            Logger.LogDebug("Unpatching...");

            Harmony?.UnpatchSelf();

            Logger.LogDebug("Finished unpatching!");
        }
    }


}
